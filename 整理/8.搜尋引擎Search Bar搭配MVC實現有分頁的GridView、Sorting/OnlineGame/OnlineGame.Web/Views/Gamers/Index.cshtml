@using OnlineGame.Web.Models
@using PagedList
@using PagedList.Mvc
@*@model IEnumerable<Gamer>*@
@model IPagedList<Gamer>
@{
    ViewBag.Title = "Gamer Index";
}
<script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
<script type="text/javascript" language="javascript">
    $(function () {
        $('#SelectAll').click(function () {
            $("input[name='GamerIdsToDelete']").prop("checked", this.checked);
            //1.
            //this.checked means $("#SelectAll").checked
            //if $("#SelectAll").checked==true, then
            //$("input[name='GamerIdsToDelete']").prop("checked", true);
            //if $("#SelectAll").checked==false, then
            //$("input[name='GamerIdsToDelete']").prop("checked", false);
            //2.
            //$("input[name='GamerIdsToDelete']") will select all the elements which name==GamerIdsToDelete.
            //$("input['#GamerIdsToDelete']") will select all only one element which Id==GamerIdsToDelete.


            $("input[name='GamerIdsToDelete']").click(function () {
                if ($("input[name='GamerIdsToDelete']").length === $("input[name='GamerIdsToDelete']:checked").length)
                {
                    $("#SelectAll").prop("checked", "checked");
                }
                else {
                    $("#SelectAll").removeProp("checked");
                }
            });

            //1.
            //When any of name==GamerIdsToDelete elements has been ckicked,
            //if all input[name='GamerIdsToDelete'] have been checked,
            //then the $("#SelectAll") must be checked.
            //Otherwise, the $("#SelectAll") is un-checked.
        });

        $("#btnDeleteSelected").click(function () {
            var count = $("input[name='GamerIdsToDelete']:checked").length;
            if (count === 0) {
                alert("Please select items to delete.");
                return false;
            }
            else
            {
                return confirm(count + " row(s) will be deleted. Are you sure to continue.");
            }
        });
    });
</script>
<h2>@ViewBag.Title</h2>
<p>
    @Html.ActionLink("Create New", "Create")
</p>
<p>
    @using (Html.BeginForm("Index", "Gamers", FormMethod.Get))
    {
        <b>Search By:</b><br />
        @Html.RadioButton("searchBy", "Name", true) <text>Name</text>
        @Html.RadioButton("searchBy", "Gender") <text>Gender</text><br />
        @Html.TextBox("searchText") <br />
        <input type="submit" value="Go" />
    }
</p>
@using (Html.BeginForm("DeleteMultiple", "Gamers", new
{
    searchBy = Request.QueryString["searchBy"],
    searchText = Request.QueryString["searchText"],
    pageNumber = Request.QueryString["pageNumber"],
    sortBy = Request["sortBy"]  //Request from ViewBag
}, FormMethod.Post))
{
    <table class="table">
        <tr>
            @*<th>
                <input type="checkbox" name="SelectAll" id="SelectAll" />
            </th>*@
            <th>
                @*@Html.DisplayNameFor(model => model.Name)*@
                @*@Html.DisplayNameFor(model => model.First().Name)*@
                @Html.ActionLink("Name", "Index", new
                {
                    sortBy = ViewBag.NameSort,
                    searchBy = Request.QueryString["searchBy"],
                    searchText = Request.QueryString["searchText"],
                })
                @*<a href="/?sortBy=Name%20desc">Name</a>*@
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.Gender)*@
                @*@Html.DisplayNameFor(model => model.First().Gender)*@
                @Html.ActionLink("Gender", "Index", new
                {
                    sortBy = ViewBag.GenderSort,
                    searchBy = Request.QueryString["searchBy"],
                    searchText = Request.QueryString["searchText"],
                })
                @*<a href="/?sortBy=Gender">Gender</a>*@
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.EmailAddress)*@
                @Html.DisplayNameFor(model => model.First().EmailAddress)
            </th>
            <th>
                Action
            </th>
        </tr>
        @if (!Model.Any())
        {
            <tr>
                <td colspan="5">
                    No matched records.
                </td>
            </tr>
        }
        @foreach (Gamer item in Model)
        {
            <tr>
                @*<td>
                    <input type="checkbox" name="GamerIdsToDelete" id="GamerIdsToDelete" value="@item.Id" />
                </td>*@
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Gender)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EmailAddress)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
        @*<tr>
            <td colspan="5">
                <input type="submit" value="Delete Selected" id="btnDeleteSelected" name="btnDeleteSelected" />
            </td>
        </tr>*@
    </table>
}
@*@Html.PagedListPager(Model, pageNumber => Url.Action("Index",
    new
    {
        //pageNumber = pageNumber,
        pageNumber,
        searchBy = Request.QueryString["searchBy"],
        searchText = Request.QueryString["searchText"]
    }))*@
@*@Html.PagedListPager(Model, pageNumber => Url.Action("Index",
    new
    {
        //pageNumber = pageNumber,
        pageNumber,
        searchBy = Request.QueryString["searchBy"],
        searchText = Request.QueryString["searchText"]
    }),
    new PagedListRenderOptions{ Display = PagedListDisplayMode.IfNeeded })*@
@*@Html.PagedListPager(Model, pageNumber => Url.Action("Index",
    new
    {
        //pageNumber = pageNumber,
        pageNumber,
        searchBy = Request.QueryString["searchBy"],
        searchText = Request.QueryString["searchText"]
    }),
    new PagedListRenderOptions
    {
        Display = PagedListDisplayMode.IfNeeded,
        DisplayPageCountAndCurrentLocation = true
    })*@
@Html.PagedListPager(Model, pageNumber => Url.Action("Index",
    new
    {
        pageNumber,
        searchBy = Request.QueryString["searchBy"],
        searchText = Request.QueryString["searchText"],
        sortBy = Request["sortBy"]  
    }),
    new PagedListRenderOptions
    {
        Display = PagedListDisplayMode.IfNeeded,
    })